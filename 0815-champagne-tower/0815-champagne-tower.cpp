//// #### unable to solve it on my own #### //// 

class Solution {
public:
    double champagneTower(int poured, int query_row, int query_glass) {
    
        /*
            0.00        // 0        

            1.00        // 1
        0.00    0.00
---------------------------------
            1.00        // 2
        0.50    0.50    

            1.00        // 3
        1.00    1.00    
---------------------------------
            1.00        // 4
        1.00    1.00
    0.25 0.25 0.25 0.25

            1.00        // 5
        1.00    1.00
    0.50 0.50 0.50 0.50

            1.00        // 6
        1.00    1.00
    0.75 0.75 0.75 0.75

            1.00        // 7
        1.00    1.00
    1.00 1.00 1.00 1.00
---------------------------------
            1.00        // 8
        1.00    1.00
    1.00 1.00 1.00 1.00
0.125 0.125

            1.00        // 9
        1.00    1.00
    1.00 1.00 1.00 1.00
0.25 0.25

            1.00        // 10
        1.00    1.00
    1.00 1.00 1.00 1.00
0.375 0.375

            1.00        // 11
        1.00    1.00
    1.00 1.00 1.00 1.00
0.50 0.50

            1.00        // 12
        1.00    1.00
    1.00 1.00 1.00 1.00
0.625 0.625

            1.00        // 13
        1.00    1.00
    1.00 1.00 1.00 1.00
0.75 0.75

            1.00        // 14
        1.00    1.00
    1.00 1.00 1.00 1.00
0.875 0.875

            1.00        // 15
        1.00    1.00
    1.00 1.00 1.00 1.00
1.00 1.00
---------------------------------
        */

        vector<vector<double>> dp(102, vector<double>(102));
        dp[0][0] = (double) poured;
        for (int r=0; r<= query_row; ++r) {
            for (int c=0; c<=r; ++c) {
                double q = (dp[r][c] - 1.0) / 2.0;
                if (q > 0) {
                    dp[r+1][c] += q;
                    dp[r+1][c+1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

        return 0;
    }
};